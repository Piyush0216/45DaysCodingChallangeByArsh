Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]


_________Solution___________:
 // using Two pointer

 void moveZeroes(vector<int>& nums) {
       // this problem is solved by the Two pointer approach

       // check if size is 1 then return

       if(nums.size() == 1)  return;

       // create two pointer for traversing 
       int left = 0,right=0;

       while( right<nums.size() ){
           if(nums[right]!=0){
               swap(nums[left],nums[right]);
               left++;
            }
           right++;
        }  

    }



// same can be solved by the bubble sort algorithm as brute force having complexity of O(n^2) ______

thougt:

initial thoughts were to count number of zeroes, but it was mentioned in note to not copy the array, so I thought for using bubble sort as it compares its current element with its neighbour element.

Approach ->

Simply the approach is to see if the current element is zero or not.
if the current element is zero, swap it with its next element.
if it is not zero, move the pointer ahead.
keep in mind that after swapping of zeroes, the rightmost element till the number of rounds would be zero.
Hence j=n-1-i

Complexity:

Time complexity:
O(n^2)
Space complexity:
O(1)

code::


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
      //using bubble sort
      int n=nums.size();
      for(int i=0;i<n;i++)
      {
          for(int j=0;j<n-1-i;j++)
          {
              if(nums[j]==0)
              {
                  swap(nums[j],nums[j+1]);
              }
          }
      }  
    }
};

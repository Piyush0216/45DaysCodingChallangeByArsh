Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 


SOLUTION ---->

// USING two Pointers

 void sortColors(vector<int>& nums) {
       // sort(nums.begin(),nums.end());

        int n = nums.size();
        int l = 0, r = n-1;
        int i = 0;

        while (i<=r) {
            if (nums[i] == 0) swap(nums[i++], nums[l++]);
            else if (nums[i] == 2) swap(nums[i], nums[r--]);
            else i++;
        }

    }


// using the different coint variables like as we solve counting or arranging the 0s 1s 2s in array 


  void sortColors(vector<int>& nums) {
        int n = nums.size();
        int c0 = 0, c2 = 0, c1 = 0;

        for (auto i: nums)
            if (!i) c0++;
            else if (i==1) c1++;
            else c2++;

        for (auto &i: nums) 
            if (c0 > 0) {i = 0; c0--;}
            else if (c1 > 0) {i = 1; c1--;}
            else {i = 2; c2--;}
    }